import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.markdown import hbold
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler

API_TOKEN = "7865773975:AAFG4fNceKdcbfiOxs4ogDcew6Hsj2Wkxu0"
CHAT_ID = -1002472216382  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ID —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()

# –ì—Ä—É–ø–ø—ã —É–±–æ—Ä–∫–∏
groups = [
    "1‚Äì5", "6‚Äì10", "11‚Äì15", "16‚Äì20", "21‚Äì25", "26‚Äì29 + PS1", "30‚Äì34", "35‚Äì38 + PS2"
]

# –•—Ä–∞–Ω–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
current_group_index = 0


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –£–±—Ä–∞–Ω–æ", callback_data="done")]]
    )


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —É–±–æ—Ä–∫—É
# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —É–±–æ—Ä–∫—É
async def send_task():
    global current_group_index
    group = groups[current_group_index]
    now = datetime.now().strftime("%d.%m.%Y %H:%M")

    text = f"üßΩ <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —É–±–æ—Ä–∫—É</b>\n\n" \
           f"{hbold('–í—Ä–µ–º—è')}: {now}\n" \
           f"{hbold('–£–±—Ä–∞—Ç—å –ü–ö')}: {group}\n\n" \
           f"–ü–æ—Å–ª–µ —É–±–æ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è"

    await bot.send_message(
        chat_id=CHAT_ID,
        message_thread_id=3146,  # üëâ —ç—Ç–æ ID —Ç–æ–ø–∏–∫–∞ "uborka"
        text=text,
        reply_markup=get_keyboard()
    )

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–µ
    current_group_index = (current_group_index + 1) % len(groups)


# –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–±—Ä–∞–Ω–æ"
@dp.callback_query(F.data == "done")
async def cleaned(callback: types.CallbackQuery):
    user = callback.from_user
    username = user.full_name

    new_text = callback.message.text + f"\n\n‚úÖ –£–±–æ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: <b>{username}</b>"

    await callback.message.edit_text(new_text)
    await callback.answer("–û—Ç–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")


# –ö–æ–º–∞–Ω–¥–∞ /segodnya ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
@dp.message(F.text.startswith("/segodnya"))
async def cmd_today(message: types.Message):
    prev_index = (current_group_index - 1) % len(groups)
    await message.answer(f"üßΩ –°–µ–≥–æ–¥–Ω—è —É–±–∏—Ä–∞–µ—Ç—Å—è: <b>{groups[prev_index]}</b>")


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
def schedule_jobs():
    # –í 10:00
    scheduler.add_job(send_task, trigger="cron", hour=22, minute=26)
    # –í 22:00
    scheduler.add_job(send_task, trigger="cron", hour=22, minute=27)


async def main():
    schedule_jobs()
    scheduler.start()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())