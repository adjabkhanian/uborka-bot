import asyncio
from datetime import datetime
from pytz import timezone

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.markdown import hbold
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = "7865773975:AAFG4fNceKdcbfiOxs4ogDcew6Hsj2Wkxu0"
CHAT_ID = -1002472216382          # ID –≥—Ä—É–ø–ø—ã
THREAD_ID = 3146                  # ID —Ç–æ–ø–∏–∫–∞ ("—É–±–æ—Ä–∫–∞")

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()

# === –°–ü–ò–°–û–ö –ì–†–£–ü–ü ===
groups = [
    "1‚Äì5", "6‚Äì10", "11‚Äì15", "16‚Äì20",
    "21‚Äì25", "26‚Äì29 + PS1", "30‚Äì34", "35‚Äì38 + PS2"
]
current_group_index = 0

# === –ö–ù–û–ü–ö–ê "–£–±—Ä–∞–Ω–æ" ===
def get_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –£–±—Ä–∞–Ω–æ", callback_data="done")]
        ]
    )

# === –ó–ê–î–ê–ù–ò–ï –ù–ê –£–ë–û–†–ö–£ ===
async def send_task():
    global current_group_index
    group = groups[current_group_index]
    now = datetime.now(timezone("Europe/Moscow")).strftime("%d.%m.%Y %H:%M")

    text = (
        "üßΩ <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —É–±–æ—Ä–∫—É</b>\n\n"
        f"{hbold('–í—Ä–µ–º—è')}: {now}\n"
        f"{hbold('–£–±—Ä–∞—Ç—å –ü–ö')}: {group}\n\n"
        "–ü–æ—Å–ª–µ —É–±–æ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è"
    )

    try:
        await bot.send_message(
            chat_id=CHAT_ID,
            message_thread_id=THREAD_ID,
            text=text,
            reply_markup=get_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    current_group_index = (current_group_index + 1) % len(groups)

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò ===
@dp.callback_query(F.data == "done")
async def cleaned(callback: types.CallbackQuery):
    user = callback.from_user
    username = user.full_name

    new_text = callback.message.text + f"\n\n‚úÖ –£–±–æ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: <b>{username}</b>"
    await callback.message.edit_text(new_text)
    await callback.answer("–û—Ç–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

# === –ö–û–ú–ê–ù–î–ê /segodnya ===
@dp.message(F.text.startswith("/segodnya"))
async def cmd_today(message: types.Message):
    prev_index = (current_group_index - 1) % len(groups)
    await message.answer(f"üßΩ –°–µ–≥–æ–¥–Ω—è —É–±–∏—Ä–∞–µ—Ç—Å—è: <b>{groups[prev_index]}</b>")

# === –†–ê–°–ü–ò–°–ê–ù–ò–ï ===
def schedule_jobs():
    tz = timezone("Europe/Moscow")
    scheduler.add_job(send_task, trigger="cron", hour=3, minute=35, timezone=tz)
    scheduler.add_job(send_task, trigger="cron", hour=3, minute=38, timezone=tz)

# === –ó–ê–ü–£–°–ö ===
async def main():
    schedule_jobs()
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())